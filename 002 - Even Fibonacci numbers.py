"""
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
"""


def is_even(n):
    """
    Checks if the given number is even
    """
    if (n % 2) == 0:
        return True
    return False


def next_fib(current, before):
    """
    returns next Fibonacci number
    """
    return current + before



def sum_even_fibonacci(top, current, before):
    """
    returns the sum of all even fib numbers below the "top" number
    """
    if current >= top:
        if is_even(current):
            return current
        else:
            return 0
    else:
        if is_even(current):
            return current + sum_even_fibonacci(top, next_fib(current, before), current)
        else:
            return sum_even_fibonacci(top, next_fib(current, before), current)


print(sum_even_fibonacci(4000000, 1, 1))